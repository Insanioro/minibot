import asyncio
import logging
from datetime import datetime, timedelta
from typing import Dict, Set
import json
import os

from telegram import Update, ChatMemberUpdated, ChatMember, Chat
from telegram.ext import Application, ChatJoinRequestHandler, ChatMemberHandler, ContextTypes, CommandHandler
from telegram.constants import ChatAction, ParseMode, ChatType
from telegram.error import BadRequest, Forbidden
import signal
import sys

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

class TelegramBot:
    def __init__(self, token: str):
        self.token = token
        self.pending_requests: Dict[str, Dict] = {}  # user_id -> {chat_id, request_time, user_data}
        self.approved_users: Set[str] = set()  # –º–Ω–æ–∂–µ—Å—Ç–≤–æ –æ–¥–æ–±—Ä–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        self.config = self.load_config()
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.stats = {
            'hourly_requests': 0,  # –∑–∞—è–≤–∫–∏ –∑–∞ —Ç–µ–∫—É—â–∏–π —á–∞—Å
            'hourly_left': 0,      # –æ—Ç–ø–∏—Å–∞–≤—à–∏–µ—Å—è –∑–∞ —Ç–µ–∫—É—â–∏–π —á–∞—Å
            'daily_requests': 0,   # –∑–∞—è–≤–∫–∏ –∑–∞ 8 —á–∞—Å–æ–≤
            'daily_left': 0,       # –æ—Ç–ø–∏—Å–∞–≤—à–∏–µ—Å—è –∑–∞ 8 —á–∞—Å–æ–≤
            'total_requests': 0,   # –≤—Å–µ–≥–æ –∑–∞—è–≤–æ–∫
            'total_approved': 0,   # –≤—Å–µ–≥–æ –æ–¥–æ–±—Ä–µ–Ω–æ
            'total_left': 0        # –≤—Å–µ–≥–æ –æ—Ç–ø–∏—Å–∞–ª–æ—Å—å
        }
        self.tracked_groups = set()  # –º–Ω–æ–∂–µ—Å—Ç–≤–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –≥—Ä—É–ø–ø
        
    def load_config(self) -> Dict:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ —Ñ–∞–π–ª–∞ config.json"""
        try:
            with open('config.json', 'r', encoding='utf-8') as f:
                return json.load(f)
        except FileNotFoundError:
            logger.warning("–§–∞–π–ª config.json –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
            return {
                "auto_approve_delay": 10,  # 10 –º–∏–Ω—É—Ç –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
                "welcome_message": " –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à—É –≥—Ä—É–ø–ø—É! –î–ª—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏/–∑–∞–∫–∞–∑–∞: @apple_anastasiya",
                "admin_notification": True
            }
    
    async def handle_chat_join_request(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞—è–≤–∫–∏ –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É"""
        if not update.chat_join_request:
            return
            
        request = update.chat_join_request
        user_id = str(request.from_user.id)
        chat_id = str(request.chat.id)
        chat_type = request.chat.type
        
        logger.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –∑–∞—è–≤–∫–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {request.from_user.first_name} ({user_id}) –≤ —á–∞—Ç {chat_id} (—Ç–∏–ø: {chat_type})")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —á–∞—Ç–∞
        if chat_type not in [ChatType.GROUP, ChatType.SUPERGROUP, ChatType.CHANNEL]:
            logger.warning(f"–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø —á–∞—Ç–∞: {chat_type}")
            return
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        self.stats['hourly_requests'] += 1
        self.stats['daily_requests'] += 1
        self.stats['total_requests'] += 1
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≥—Ä—É–ø–ø—É –≤ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ
        self.tracked_groups.add(chat_id)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞—è–≤–∫–µ
        self.pending_requests[user_id] = {
            'chat_id': chat_id,
            'request_time': datetime.now(),
            'user_data': {
                'id': request.from_user.id,
                'first_name': request.from_user.first_name,
                'last_name': request.from_user.last_name,
                'username': request.from_user.username
            }
        }
        
        # –ü–ª–∞–Ω–∏—Ä—É–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–¥–æ–±—Ä–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 10 –º–∏–Ω—É—Ç
        delay = self.config.get("auto_approve_delay", 600)
        
        if context.job_queue is not None:
            context.job_queue.run_once(
                self.auto_approve_request,
                delay,
                data={'user_id': user_id, 'chat_id': chat_id},
                name=f"approve_{user_id}_{chat_id}"
            )
            logger.info(f"–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–¥–æ–±—Ä–µ–Ω–∏–µ —á–µ—Ä–µ–∑ {delay} —Å–µ–∫—É–Ω–¥")
        else:
            logger.error("JobQueue –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω! –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–¥–æ–±—Ä–µ–Ω–∏–µ –Ω–µ –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å.")
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ (–µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö)
        if self.config.get("admin_notification", True):
            await self.notify_admins(context, request)
    
    async def auto_approve_request(self, context: ContextTypes.DEFAULT_TYPE):
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–¥–æ–±—Ä—è–µ—Ç –∑–∞—è–≤–∫—É —á–µ—Ä–µ–∑ —É–∫–∞–∑–∞–Ω–Ω—ã–π –≤—Ä–µ–º—è"""
        job_data = context.job.data
        user_id = job_data['user_id']
        chat_id = job_data['chat_id']
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞—è–≤–∫–∞ –≤—Å–µ –µ—â–µ –∞–∫—Ç—É–∞–ª—å–Ω–∞
        if user_id not in self.pending_requests:
            logger.info(f"–ó–∞—è–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞")
            return
        
        try:
            # –û–¥–æ–±—Ä—è–µ–º –∑–∞—è–≤–∫—É
            await context.bot.approve_chat_join_request(
                chat_id=int(chat_id),
                user_id=int(user_id)
            )
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–ø–∏—Å–æ–∫ –æ–¥–æ–±—Ä–µ–Ω–Ω—ã—Ö
            self.approved_users.add(user_id)
            
            # –£–¥–∞–ª—è–µ–º –∏–∑ –æ–∂–∏–¥–∞—é—â–∏—Ö
            user_data = self.pending_requests.pop(user_id)
            
            logger.info(f"–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–¥–æ–±—Ä–µ–Ω–∞ –∑–∞—è–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_data['user_data']['first_name']} ({user_id})")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ–¥–æ–±—Ä–µ–Ω–Ω—ã—Ö
            self.stats['total_approved'] += 1
            

            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–º –æ–¥–æ–±—Ä–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏: {e}")
            # –£–¥–∞–ª—è–µ–º –∏–∑ –æ–∂–∏–¥–∞—é—â–∏—Ö –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
            self.pending_requests.pop(user_id, None)
    
    async def handle_chat_member_update(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —á–∞—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        if not update.chat_member:
            return
        
        chat_member_update = update.chat_member
        user_id = str(chat_member_update.new_chat_member.user.id)
        old_status = chat_member_update.old_chat_member.status
        new_status = chat_member_update.new_chat_member.status
        chat_type = update.effective_chat.type
        chat_id = str(update.effective_chat.id)
        
        # –î–æ–±–∞–≤–ª—è–µ–º —á–∞—Ç –≤ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ –µ—Å–ª–∏ –µ–≥–æ –µ—â–µ –Ω–µ—Ç
        self.tracked_groups.add(chat_id)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—Ç–∞–ª —É—á–∞—Å—Ç–Ω–∏–∫–æ–º –≥—Ä—É–ø–ø—ã
        if (old_status in [ChatMember.LEFT, ChatMember.KICKED] and 
            new_status in [ChatMember.MEMBER, ChatMember.ADMINISTRATOR, ChatMember.OWNER]):
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –∫–æ—Ç–æ—Ä–æ–≥–æ –º—ã –æ–¥–æ–±—Ä–∏–ª–∏
            if user_id in self.approved_users:
                await self.send_welcome_message(update, context, chat_member_update.new_chat_member.user)
                self.approved_users.remove(user_id)  # –£–¥–∞–ª—è–µ–º –∏–∑ —Å–ø–∏—Å–∫–∞ –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
        
        # –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –ª—é–¥–µ–π, –ø–æ–∫–∏–¥–∞—é—â–∏—Ö –≥—Ä—É–ø–ø—É
        elif (old_status in [ChatMember.MEMBER, ChatMember.ADMINISTRATOR] and 
              new_status in [ChatMember.LEFT, ChatMember.KICKED]):
            
            self.stats['hourly_left'] += 1
            self.stats['daily_left'] += 1
            self.stats['total_left'] += 1
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {chat_member_update.new_chat_member.user.first_name} ({user_id}) –ø–æ–∫–∏–Ω—É–ª —á–∞—Ç {chat_type}")
    
    async def send_welcome_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE, user):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–æ–≤–æ–º—É —É—á–∞—Å—Ç–Ω–∏–∫—É"""
        chat_id = update.effective_chat.id
        chat_type = update.effective_chat.type
        welcome_text = self.config.get("welcome_message", "üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à—É –≥—Ä—É–ø–ø—É!")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –±–æ—Ç–∞ –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π
        try:
            bot_member = await context.bot.get_chat_member(chat_id, context.bot.id)
            if not bot_member.can_send_messages:
                logger.warning(f"–ë–æ—Ç –Ω–µ –º–æ–∂–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç {chat_id}")
                return
        except (BadRequest, Forbidden) as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∞–≤–∞ –±–æ—Ç–∞ –≤ —á–∞—Ç–µ {chat_id}: {e}")
            return
        
        # –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        if chat_type == ChatType.CHANNEL:
            # –î–ª—è –∫–∞–Ω–∞–ª–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è
            personalized_message = f"üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user.first_name}! {welcome_text}"
        else:
            # –î–ª—è –≥—Ä—É–ø–ø –∏—Å–ø–æ–ª—å–∑—É–µ–º —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ
            user_mention = f"[{user.first_name}](tg://user?id={user.id})"
            personalized_message = f"{user_mention}, {welcome_text}"
        
        try:
            await context.bot.send_message(
                chat_id=chat_id,
                text=personalized_message,
                parse_mode=ParseMode.MARKDOWN
            )
            logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.first_name} ({user.id}) –≤ {chat_type}")
        except (BadRequest, Forbidden) as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            # –ü—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            try:
                simple_message = f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user.first_name}! {welcome_text}"
                await context.bot.send_message(chat_id=chat_id, text=simple_message)
                logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–ø—Ä–æ—â–µ–Ω–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
            except Exception as e2:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–∞–∂–µ —É–ø—Ä–æ—â–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {e2}")
    
    async def notify_admins(self, context: ContextTypes.DEFAULT_TYPE, request):
        """–£–≤–µ–¥–æ–º–ª—è–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –æ –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–µ"""
        try:
            # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–µ–∑ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
            username = request.from_user.username if request.from_user.username else '–Ω–µ —É–∫–∞–∑–∞–Ω'
            last_name = ' ' + request.from_user.last_name if request.from_user.last_name else ''
            delay_minutes = self.config.get('auto_approve_delay', 600) // 60
            
            admin_message = (
                f"üìù –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ:\n"
                f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {request.from_user.first_name}{last_name}\n"
                f"üÜî ID: {request.from_user.id}\n"
                f"üë§ Username: {username}\n"
                f"‚è∞ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–¥–æ–±—Ä–µ–Ω–∏–µ —á–µ—Ä–µ–∑ {delay_minutes} –º–∏–Ω—É—Ç"
            )
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
            chat_admins = await context.bot.get_chat_administrators(request.chat.id)
            
            for admin in chat_admins:
                if not admin.user.is_bot:  # –ù–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –±–æ—Ç–∞–º
                    try:
                        await context.bot.send_message(
                            chat_id=admin.user.id,
                            text=admin_message
                        )
                    except Exception as e:
                        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É {admin.user.id}: {e}")
                        
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤: {e}")
    



    async def send_hourly_stats(self, context: ContextTypes.DEFAULT_TYPE):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ—á–∞—Å–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º"""
        if self.stats['hourly_requests'] == 0 and self.stats['hourly_left'] == 0:
            return  # –ù–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—É—Å—Ç—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        
        current_time = datetime.now().strftime("%H:%M")
        stats_message = (
            f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å ({current_time}):\n"
            f"üìà –ù–æ–≤—ã—Ö –∑–∞—è–≤–æ–∫: {self.stats['hourly_requests']}\n"
            f"üìâ –ü–æ–∫–∏–Ω—É–ª–∏ –≥—Ä—É–ø–ø—É: {self.stats['hourly_left']}\n"
            f"‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n"
            f"üîÑ –ü—Ä–∏—Ä–æ—Å—Ç: {self.stats['hourly_requests'] - self.stats['hourly_left']}"
        )
        
        await self.send_stats_to_admins(context, stats_message)
        
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø–æ—á–∞—Å–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        self.stats['hourly_requests'] = 0
        self.stats['hourly_left'] = 0
    
    async def send_daily_stats(self, context: ContextTypes.DEFAULT_TYPE):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ 8 —á–∞—Å–æ–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º"""
        current_time = datetime.now().strftime("%d.%m.%Y %H:%M")
        stats_message = (
            f"üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 8 —á–∞—Å–æ–≤ ({current_time}):\n\n"
            f"üìù –ù–æ–≤—ã—Ö –∑–∞—è–≤–æ–∫: {self.stats['daily_requests']}\n"
            f"‚úÖ –û–¥–æ–±—Ä–µ–Ω–æ: {self.stats['total_approved']}\n"
            f"üëã –ü–æ–∫–∏–Ω—É–ª–∏ –≥—Ä—É–ø–ø—É: {self.stats['daily_left']}\n"
            f"üîÑ –ß–∏—Å—Ç—ã–π –ø—Ä–∏—Ä–æ—Å—Ç: {self.stats['daily_requests'] - self.stats['daily_left']}\n\n"
            f"üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
            f"üìã –í—Å–µ–≥–æ –∑–∞—è–≤–æ–∫: {self.stats['total_requests']}\n"
            f"‚úÖ –í—Å–µ–≥–æ –æ–¥–æ–±—Ä–µ–Ω–æ: {self.stats['total_approved']}\n"
            f"üëã –í—Å–µ–≥–æ –ø–æ–∫–∏–Ω—É–ª–æ: {self.stats['total_left']}"
        )
        
        await self.send_stats_to_admins(context, stats_message)
        
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –¥–Ω–µ–≤–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        self.stats['daily_requests'] = 0
        self.stats['daily_left'] = 0
    
    async def send_stats_to_admins(self, context: ContextTypes.DEFAULT_TYPE, message: str):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤—Å–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º –≤—Å–µ—Ö –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –≥—Ä—É–ø–ø"""
        sent_to_admins = set()  # –ß—Ç–æ–±—ã –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –¥—É–±–ª–∏ –æ–¥–Ω–æ–º—É –∞–¥–º–∏–Ω—É
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ –≥—Ä—É–ø–ø—ã
        if not self.tracked_groups:
            logger.warning("–ù–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –≥—Ä—É–ø–ø –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
            return
        
        for chat_id in list(self.tracked_groups):  # –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏
            try:
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Ç–µ
                chat = await context.bot.get_chat(int(chat_id))
                chat_type = chat.type
                
                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–∞–Ω–∞–ª—ã, –µ—Å–ª–∏ –±–æ—Ç –Ω–µ –∞–¥–º–∏–Ω
                if chat_type == ChatType.CHANNEL:
                    try:
                        bot_member = await context.bot.get_chat_member(int(chat_id), context.bot.id)
                        if bot_member.status not in [ChatMember.ADMINISTRATOR, ChatMember.OWNER]:
                            continue
                    except (BadRequest, Forbidden):
                        continue
                
                chat_admins = await context.bot.get_chat_administrators(int(chat_id))
                
                for admin in chat_admins:
                    if not admin.user.is_bot and admin.user.id not in sent_to_admins:
                        try:
                            await context.bot.send_message(
                                chat_id=admin.user.id,
                                text=message
                            )
                            sent_to_admins.add(admin.user.id)
                            logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–¥–º–∏–Ω—É {admin.user.id} –∏–∑ {chat_type}")
                        except (BadRequest, Forbidden) as e:
                            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∞–¥–º–∏–Ω—É {admin.user.id}: {e}")
                        except Exception as e:
                            logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∞–¥–º–∏–Ω—É {admin.user.id}: {e}")
                            
            except (BadRequest, Forbidden) as e:
                logger.warning(f"–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —á–∞—Ç—É {chat_id}: {e}")
                # –£–¥–∞–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã–π —á–∞—Ç –∏–∑ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö
                self.tracked_groups.discard(chat_id)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞–¥–º–∏–Ω–æ–≤ –¥–ª—è —á–∞—Ç–∞ {chat_id}: {e}")
    
    async def setup_periodic_tasks(self, context: ContextTypes.DEFAULT_TYPE):
        """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞—á–∏ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        if context.job_queue is not None:
            # –ü–æ—á–∞—Å–æ–≤—ã–µ –æ—Ç—á–µ—Ç—ã
            context.job_queue.run_repeating(
                self.send_hourly_stats,
                interval=3600,  # –∫–∞–∂–¥—ã–π —á–∞—Å (3600 —Å–µ–∫—É–Ω–¥)
                first=3600,     # –ø–µ—Ä–≤—ã–π –æ—Ç—á–µ—Ç —á–µ—Ä–µ–∑ —á–∞—Å
                name="hourly_stats"
            )
            
            # –û—Ç—á–µ—Ç—ã –∫–∞–∂–¥—ã–µ 8 —á–∞—Å–æ–≤
            context.job_queue.run_repeating(
                self.send_daily_stats,
                interval=28800,  # –∫–∞–∂–¥—ã–µ 8 —á–∞—Å–æ–≤ (8 * 3600 —Å–µ–∫—É–Ω–¥)
                first=28800,     # –ø–µ—Ä–≤—ã–π –æ—Ç—á–µ—Ç —á–µ—Ä–µ–∑ 8 —á–∞—Å–æ–≤
                name="daily_stats"
            )
            
            logger.info("–ù–∞—Å—Ç—Ä–æ–µ–Ω—ã –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞—á–∏ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
        else:
            logger.error("JobQueue –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –¥–ª—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏—Ö –∑–∞–¥–∞—á!")

    def run(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞"""
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å JobQueue
        from telegram.ext import JobQueue
        
        application = (
            Application.builder()
            .token(self.token)
            .job_queue(JobQueue())
            .build()
        )
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        application.add_handler(ChatJoinRequestHandler(self.handle_chat_join_request))
        application.add_handler(ChatMemberHandler(self.handle_chat_member_update))
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞—á–∏ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        application.job_queue.run_once(
            self.setup_periodic_tasks,
            0  # –ó–∞–ø—É—Å–∫–∞–µ–º —Å—Ä–∞–∑—É
        )
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º graceful shutdown
        def signal_handler(signum, frame):
            logger.info("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–æ—Ç–∞...")
            application.stop()
            sys.exit(0)
        
        signal.signal(signal.SIGINT, signal_handler)
        signal.signal(signal.SIGTERM, signal_handler)
        
        logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
        logger.info(f"–û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ —Ç–∏–ø—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π: –∑–∞—è–≤–∫–∏ –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ, –∏–∑–º–µ–Ω–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        try:
            application.run_polling(
                allowed_updates=Update.ALL_TYPES,
                drop_pending_updates=True  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å—Ç–∞—Ä—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ
            )
        except Exception as e:
            logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
            raise

def main():
    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–ª–∏ —Ñ–∞–π–ª–∞
    token = os.getenv('TELEGRAM_BOT_TOKEN')
    
    if not token:
        try:
            # –ü—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ .env —Ñ–∞–π–ª–∞ (–¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏)
            with open('.env', 'r', encoding='utf-8') as f:
                for line in f:
                    line = line.strip()
                    if line.startswith('TELEGRAM_BOT_TOKEN=') and not line.startswith('#'):
                        token = line.split('=', 1)[1].strip()
                        # –£–±–∏—Ä–∞–µ–º –∫–∞–≤—ã—á–∫–∏ –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
                        if token.startswith('"') and token.endswith('"'):
                            token = token[1:-1]
                        if token.startswith("'") and token.endswith("'"):
                            token = token[1:-1]
                        break
        except FileNotFoundError:
            logger.warning("–§–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è")
    
    if not token or token == 'your_bot_token_here':
        logger.error(
            "‚ùå TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω!\n"
            "–î–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏: —Å–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª .env —Å —Ç–æ–∫–µ–Ω–æ–º\n"
            "–î–ª—è Render: –¥–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è TELEGRAM_BOT_TOKEN"
        )
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–æ–∫–µ–Ω –≤—ã–≥–ª—è–¥–∏—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ (–¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å : –∏ –±—ã—Ç—å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–ª–∏–Ω–Ω—ã–º)
    if ':' not in token or len(token) < 35:
        logger.error("‚ùå –¢–æ–∫–µ–Ω –±–æ—Ç–∞ –∏–º–µ–µ—Ç –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç!")
        return
    
    logger.info(f"üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ —Å —Ç–æ–∫–µ–Ω–æ–º: {token[:10]}...")
    logger.info(f"üåç –†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã: {'PRODUCTION (Render)' if os.getenv('RENDER') else 'DEVELOPMENT (Local)'}")
    
    try:
        bot = TelegramBot(token)
        bot.run()
    except KeyboardInterrupt:
        logger.info("üëã –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.error(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        raise

if __name__ == '__main__':
    main()
